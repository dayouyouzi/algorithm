给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。

注意:

可以认为区间的终点总是大于它的起点。
区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。
示例 1:

输入: [ [1,2], [2,3], [3,4], [1,3] ]

输出: 1

解释: 移除 [1,3] 后，剩下的区间没有重叠。





class Solution {
public:
    // 按照区间右边界排序，设置排序规则
    static bool cmp (const vector<int>& a, const vector<int>& b) {
        return a[1] < b[1];
    }
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        if (intervals.size() == 0) return 0;//若，数组大小为0，返回0
        sort(intervals.begin(), intervals.end(), cmp);//排序
        int count = 1; // 记录非交叉区间的个数
        int end = intervals[0][1]; // 记录区间分割点，初始值为第一个区间的右边界
        for (int i = 1; i < intervals.size(); i++) {
            if (end <= intervals[i][0]) {//若之前区间右边界<当前的区间左边界，说明不交叉
                end = intervals[i][1];//更新分割点，重新选择end
                count++;//记录不交出区间个数加1
            }
        }
        return intervals.size() - count;//去除区间=数组大小 - 不交叉区间个数
    }
};

