
//合并两个链表
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* preHead = new ListNode(-1);

        ListNode* prev = preHead;
        while (l1 != nullptr && l2 != nullptr) {
            if (l1->val < l2->val) {
                prev->next = l1;
                l1 = l1->next;
            } else {
                prev->next = l2;
                l2 = l2->next;
            }
            prev = prev->next;
        }

        // 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可
        prev->next = l1 == nullptr ? l2 : l1;

        return preHead->next;
    }
};


//合并k个升序链表

class Solution {
public:
    // 小根堆的回调函数
    struct cmp{  
       bool operator()(ListNode *a,ListNode *b){
          return a->val > b->val;//小根堆若要升序，则这里是降序，要相反
       }
    };
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*, vector<ListNode*>, cmp> pri_queue;
        // 建立大小为k的小根堆，先把链表的首节点放入堆中，进行排序
        for(auto elem : lists){
            if(elem) pri_queue.push(elem);
        }
        // 可以使用哑节点/哨兵节点（空节点）
        ListNode dummy(-1);
        ListNode* p = &dummy;//节点p指向空节点dump
        // 开始出队
        while(!pri_queue.empty()){
            ListNode* top = pri_queue.top();//堆顶元素为最小链表
             pri_queue.pop();//丢弃最小链表
            p->next = top; //节点p->next指向这个最小链表
            p = p->next;//节点p指向这个链表
            if(top->next) {//判断该链表之后还有其他值吗
            pri_queue.push(top->next);//若有，则插入堆，进行排序，在进行相似操作，链接在新链表dummy后面
            }
        }
        return dummy.next;  //返回dummy.next，因为dummy首节点为空节点
    }
    
};



//两个合并
class Solution {
public:
    // 合并两个有序链表
    ListNode* merge(ListNode* p1, ListNode* p2){
        if(!p1) return p2;
        if(!p2) return p1;
        if(p1->val <= p2->val){
            p1->next = merge(p1->next, p2);
            return p1;
        }else{
            p2->next = merge(p1, p2->next);
            return p2;
        }
    }

     ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0) return nullptr;
        ListNode* head = lists[0];//先找出第一个链表
        for(int i = 1; i<lists.size(); ++i){//遍历lists的大小，看有多少个链表
            if(lists[i]) head = merge(head, lists[i]);//两两合并（list[0]与list[1]合并为head，后 head与list[2]合并
        }
        return head;  //返回最终合并的链表
    }
};

