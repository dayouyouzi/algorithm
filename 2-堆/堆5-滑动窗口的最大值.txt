
给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。

返回滑动窗口中的最大值。

 

示例 1：

输入：nums = [1,3,-1,-3,5,3,6,7], k = 3
输出：[3,3,5,5,6,7]


class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        priority_queue<pair<int, int>> q;
        for (int i = 0; i < k; ++i) {
            q.emplace(nums[i], i);
        }
        vector<int> ans = {q.top().first};
        for (int i = k; i < n; ++i) {
            q.emplace(nums[i], i);
            while (q.top().second <= i - k) {
                q.pop();
            }
            ans.push_back(q.top().first);
        }
        return ans;
    }
};

//单调队列 --双端队列duque
//当滑动窗口向右移动时，我们需要把一个新的元素放入队列中。
//为了保持队列的性质，我们会不断地将新的元素与队尾的元素相比较，
//如果前者大于等于后者，那么队尾的元素就可以被永久地移除，我们将其弹出队列。
//我们需要不断地进行此项操作，直到队列为空或者新的元素小于队尾的元素。

//由于队列中下标对应的元素是严格单调递减的，因此此时队首下标对应的元素就是滑动窗口中的最大值。
//但与方法一中相同的是，此时的最大值可能在滑动窗口左边界的左侧，并且随着窗口向右移动，
//它永远不可能出现在滑动窗口中了。因此我们还需要不断从队首弹出元素，直到队首元素在窗口中为止。

//为了可以同时弹出队首和队尾的元素，我们需要使用双端队列。满足这种单调性的双端队列一般称作「单调队列」。



class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        deque<int> q;
        for (int i = 0; i < k; ++i) {//先存入k个yuans
            while (!q.empty() && nums[i] >= nums[q.back()]) {//判断要存入的数是否大于队尾，最终形成单调队列
                q.pop_back();//若大于出栈
            }
            q.push_back(i);//若小于入栈
        }

        vector<int> ans = {nums[q.front()]};//第一个滑动窗口最大元素存入数组中
        for (int i = k; i < n; ++i) {//再遍历下表为k的之后的数组
            while (!q.empty() && nums[i] >= nums[q.back()]) {//做同样的判断，形成单调队列
                q.pop_back();
            }
            q.push_back(i);
            while (q.front() <= i - k) {//除了要形成单调队列，还有看此时的元素是否在滑动窗口中
                q.pop_front();//若不在，则队首出队，目的是让队列的首元素一直在滑动窗口中
            }
            ans.push_back(nums[q.front()]);//通过上面的判断过滤后，最终队首为最大值，存入数组中
        }
        return ans;
    }
};

作者：LeetCode-Solution

