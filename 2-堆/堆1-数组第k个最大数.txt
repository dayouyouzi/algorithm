class Solution {
public:
    void maxHeapify(vector<int>& a, int i, int heapSize) {
        int l = i * 2 + 1, r = i * 2 + 2, largest = i;
        if (l < heapSize && a[l] > a[largest]) {
            largest = l;
        } 
        if (r < heapSize && a[r] > a[largest]) {
            largest = r;
        }
        if (largest != i) {
            swap(a[i], a[largest]);
            maxHeapify(a, largest, heapSize);
        }
    }
//得出一个大根堆（90 70 80 60 10 40）
//之后数组首部的最大值，与数组尾部，进行交换，最后，相当于（10 40 60 80 70 90）,最大值在数组尾部

    void buildMaxHeap(vector<int>& a, int heapSize) {
        for (int i = heapSize / 2; i >= 0; --i) {
            maxHeapify(a, i, heapSize);
        } 
    }

    int findKthLargest(vector<int>& nums, int k) {
        int heapSize = nums.size();
        buildMaxHeap(nums, heapSize);
        for (int i = nums.size() - 1; i >= nums.size() - k + 1; --i) {//i=8(9-1);i>=8(9-2+1);i--
            swap(nums[0], nums[i]);
            --heapSize;
            maxHeapify(nums, 0, heapSize);
        }
        return nums[0];
    }
};





//运用优先队列
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        if (nums.empty() || k < 1) {
            return INT_MIN;
        }

        int len = nums.size();
        priority_queue<int, vector<int>, greater<int> > min_heap; // 创建小顶堆（堆顶为最小元素）

        for (int i = 0; i < k; ++i) {
            min_heap.push(nums[i]); // 先填充前 k 个元素入堆
        }


//堆中只存在两个元素，如（32156）  23   35  56   最终队首为第2大元素
        for (int i = k; i < len; ++i) {
 	  min_heap.push(nums[i]);//先入栈
            if ( min_heap.size()>k) {
                // 若 堆的大小大于看k，弹出堆顶元素
	min_heap.pop();
             
            }
        }

        return min_heap.top();
    }
};



//快速排序

class Solution {
public:
    int quickSelect(vector<int>& a, int l, int r, int index) {
        int q = randomPartition(a, l, r);
        if (q == index) {
            return a[q];
        } else {
            return q < index ? quickSelect(a, q + 1, r, index) : quickSelect(a, l, q - 1, index);
        }
    }


//设置随机数
    inline int randomPartition(vector<int>& a, int l, int r) {
        int i = rand() % (r - l + 1) + l;
        swap(a[i], a[r]);
        return partition(a, l, r);
    }

    inline int partition(vector<int>& a, int l, int r) {
        int x = a[r], i = l - 1;
        for (int j = l; j < r; ++j) {
            if (a[j] <= x) {
                swap(a[++i], a[j]);
            }
        }
        swap(a[i + 1], a[r]);
        return i + 1;
    }

    int findKthLargest(vector<int>& nums, int k) {
        srand(time(0));
        return quickSelect(nums, 0, nums.size() - 1, nums.size() - k);
    }
};

