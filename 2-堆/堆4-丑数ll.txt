
我们从堆中包含一个数字开始：1，去计算下一个丑数。将 1 从堆中弹出然后将三个数字添加到堆中：1×2, 1×3，和 1×5。

现在堆中最小的数字是 2。为了计算下一个丑数，要将 2 从堆中弹出然后添加三个数字：2×2, 2 2×3，和 2×5。

重复该步骤计算所有丑数。在每个步骤中，弹出堆中最小的丑数 kk，并在堆中添加三个丑数：k \times 2k×2, k \times 3k×3，和 k \times 5k×5。



class Solution {
public:
    int nthUglyNumber(int n) {
        priority_queue <double,vector<double>,greater<double> > q;//建立小根堆
        double answer=1;
        for (int i=1;i<n;++i)
        {
            q.push(answer*2);
            q.push(answer*3);
            q.push(answer*5);
            answer=q.top();//第n个丑数赋值给answer
            q.pop();
            while (!q.empty() && answer==q.top())//去除重复，若重复，肯定是排序在一起的，可以一直查看是否相等
                q.pop();
        }
        return answer;
    }
};


class Solution {
public:
    int nthUglyNumber(int n) {
        vector<int> dp(n);
        dp.at(0)=1;
        int p_2,p_3,p_5;
        p_2=p_3=p_5=0;
        for (int i=1;i<n;++i)
        {
            dp.at(i)=min(min(2*dp.at(p_2),3*dp.at(p_3)),5*dp.at(p_5));//相乘i所得最小的丑数，放入数组中，
	//则就不需要这个丑数与i（2 3 5）相乘了，相应的指针++，让下一个丑数与该i相乘
            if (dp.at(i)==2*dp.at(p_2))
                ++p_2;
            if (dp.at(i)==3*dp.at(p_3))
                ++p_3;
            if (dp.at(i)==5*dp.at(p_5))
                ++p_5;
        }
        return dp.at(n-1);
    }
};

