路径 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。

路径和 是路径中各节点值的总和。

给你一个二叉树的根节点 root ，返回其 最大路径和 。

 

示例 1：


输入：root = [1,2,3]
输出：6
解释：最优路径是 2 -> 1 -> 3 ，路径和为 2 + 1 + 3 = 6



思路1：
如图所示，题目所说的二叉树中的路径可以分为以下四种：

单一结点

某个结点及其左子树组成路径

某个结点及其右子树组成路径

某个结点及其左右子树组成的路径

要注意其中类型4的路径是无法作为子路径返回给上一级结点的，否则形成的就不是路径（只有惟一的起点和终点）而是树了，
可以结合下面的图来理解

有了以上思路，解题步骤就很简单了，主要思路是采用递归后序遍历。遍历到某个结点时，
先获得该结点左右子树中的最大路径，然后将左右子树中的最大路径与该结点连接形成以上四种类型的路径，
更新全局的最大路径和，最后将1、2、3类型路径中最大的路径和返回给上一级结点。


class Solution {
public:

int maxPathSum(TreeNode*root ,int& val){
    if(root == NULL) return 0;
    int leftpath = max(0,maxPathSum(root->left,val));
    int rightpath = max(0,maxPathSum(root->right,val));
    int ref =root->val + max(leftpath,rightpath);
    int n = root->val +leftpath + rightpath;
    val = max(val,max(ref,n));
    return ref;
}



    int maxPathSum(TreeNode* root) {
        int val = INT_MIN;
        maxPathSum(root,val);
        return val;
    }
};


class Solution {
public:
    int val = INT_MIN;
int maxSum(TreeNode*root){
    if(root == NULL) return 0;
    int leftpath = max(0,maxSum(root->left));//求出左子树最大路径的值
    int rightpath = max(0,maxSum(root->right));//求出左子树最大路径的值
    int ref =root->val + max(leftpath,rightpath);//计算b->a->a的父亲和c->a->a的父亲的情况
    int n = root->val +leftpath + rightpath;//计算b->a->c的情况
    val = max(val,max(ref,n));//作为路径与已经计算过历史最大值做比较，先比较左中右和左中或右中的最大值
    return ref;//返回ref，给a的父亲
}



    int maxPathSum(TreeNode* root) {
        
        maxSum(root);
        return val;
    }
};