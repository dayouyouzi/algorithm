
给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 任意顺序 返回答案。


进阶：你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？

示例 1：

输入：nums = [1,2,1,3,2,5]
输出：[3,5]
解释：[5, 3] 也是有效的答案。

思路1：哈希表，若map，则最终判断it.second是否等于1，是，则插入v中

class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        vector<int> res;
        int n = nums.size();
        if(n ==1 ) return nums;
        set<int> st;
        set<int>::iterator it;
        for(int i=0;i<n;i++){
            if(st.find(nums[i]) == st.end()){
                st.insert(nums[i]);
            }else{
                st.erase(nums[i]);
            }
        }
        for(it = st.begin();it !=st.end();it++){
            res.push_back(*it);
        }
        return res;
    }
};

class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
       vector<int> v;
        unordered_map<int,int> m;
        for(auto& i : nums){
           m[i]++;
            
            }
        for(auto& i : m)
        if(i.second== 1){
                v.push_back(i.first);
        }
        return v;
    }
};


思路2：
设题目中这两个只出现1次的数字分别为A和B，如果能将A，B分开到二个数组中，
那显然符合“异或”解法的关键点了。因此这个题目的关键点就是将A，B分开到二个数组中。
由于A，B肯定是不相等的，因此在二进制上必定有一位是不同的。根据这一位是0还是1可以将A，B分开到A组和B组。
而这个数组中其它数字要么就属于A组，要么就属于B组。
再对A组和B组分别执行“异或”解法就可以得到A，B了。
而要判断A，B在哪一位上不相同，只要根据A异或B的结果就可以知道了，
这个结果在二进制上为1的位就说明A，B在这一位上是不相同的。


class Solution {
    public int[] singleNumber(int[] nums) {
        int [] res = new int [2];
        if (nums == null || nums.length < 2) {
            return res;
        }
        int xorRes = 0;
        for (int x : nums) {
            xorRes ^= x;
        }
        int temp = 1; // 用来标志第几位是 1
        while (true) {
            if ((xorRes & 1) == 1) {
                break;
            }
            temp = temp << 1;
            xorRes = xorRes >> 1; // 右移，从低到高
        }

        for (int y : nums) {
            if ((y & temp) == 0) { // 对应位是 0
                res[0] ^= y;
            } else {
                res[1] ^= y;
            }
        }
        return res;
    }
}

