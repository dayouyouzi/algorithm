给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。

解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。

 

示例 1：

输入：nums = [1,2,3]
输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

class Solution {
   vector<vector<int>> subsets(vector<int>& nums) {
        int S = nums.size();
        int N = 1 << S;//定义一个“终点”。举例：N-1为11111111111，意味着所有元素都已经被记录在该二进制数上了
        vector<vector<int> > res;//二维数组存储每一个子
        for (int i = 0; i < N; ++i) {  //比如说：i从00000遍历到11111.  i的每一个状态都意味着一种子集。遍历意味着得到所有子集
            vector<int> v;//存储当前i代表着的子集
            for (int j = 0; j < S; ++j)//j的数值为0，1，2，3···以此类推。j意味着nums数组中的第j位元素
                if ((i>>j) & 1 ==1)//i右移j位，并与1相与，判断最低位是否为1，若为1，则加入v，
			//不为1，则放弃此时i，进入下一个i
                    v.push_back(nums[j]);//如果存在则将第j位元素置入v数组
            res.push_back(v);//循环完成后v即为i代表的子集。将v置入答案数组
        }
        return res;
    }
};

这一个好理解点
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res;
        int size = 1 << nums.size();
        for(int i = 0; i < size; i++){//需要多少个子集
            vector<int> v;
            int num = i, idx = 0;//设初值
            while(num){//当num右移不为0时
                if(num & 1) v.push_back(nums[idx]);//判断num最低位是否为1，为1，则写入这个i的子集中
                num >>= 1;//num右移，进行下一位的判断
                ++idx;//这里id需加1
            }
            res.push_back(v);
        }
        return res;
    }
};

